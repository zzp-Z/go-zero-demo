// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: api/user_server.proto

package user_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserServer_GetUser_FullMethodName    = "/user_server.UserServer/GetUser"
	UserServer_UpdateUser_FullMethodName = "/user_server.UserServer/UpdateUser"
	UserServer_CreateUser_FullMethodName = "/user_server.UserServer/CreateUser"
	UserServer_Login_FullMethodName      = "/user_server.UserServer/Login"
	UserServer_DeleteUser_FullMethodName = "/user_server.UserServer/DeleteUser"
)

// UserServerClient is the client API for UserServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户服务
type UserServerClient interface {
	// 获取用户信息
	GetUser(ctx context.Context, in *UserIdReqVo, opts ...grpc.CallOption) (*UserInfoRespVo, error)
	// 更新用户信息
	UpdateUser(ctx context.Context, in *UpdateUserReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error)
	// 创建新用户
	CreateUser(ctx context.Context, in *CreateUserReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error)
	// 用户登录
	Login(ctx context.Context, in *VerificationReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error)
	// 删除用户
	DeleteUser(ctx context.Context, in *VerificationReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error)
}

type userServerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServerClient(cc grpc.ClientConnInterface) UserServerClient {
	return &userServerClient{cc}
}

func (c *userServerClient) GetUser(ctx context.Context, in *UserIdReqVo, opts ...grpc.CallOption) (*UserInfoRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoRespVo)
	err := c.cc.Invoke(ctx, UserServer_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UpdateUser(ctx context.Context, in *UpdateUserReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JwtTokenRespVo)
	err := c.cc.Invoke(ctx, UserServer_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) CreateUser(ctx context.Context, in *CreateUserReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JwtTokenRespVo)
	err := c.cc.Invoke(ctx, UserServer_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) Login(ctx context.Context, in *VerificationReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JwtTokenRespVo)
	err := c.cc.Invoke(ctx, UserServer_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) DeleteUser(ctx context.Context, in *VerificationReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JwtTokenRespVo)
	err := c.cc.Invoke(ctx, UserServer_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServerServer is the server API for UserServer service.
// All implementations must embed UnimplementedUserServerServer
// for forward compatibility
//
// 用户服务
type UserServerServer interface {
	// 获取用户信息
	GetUser(context.Context, *UserIdReqVo) (*UserInfoRespVo, error)
	// 更新用户信息
	UpdateUser(context.Context, *UpdateUserReqVo) (*JwtTokenRespVo, error)
	// 创建新用户
	CreateUser(context.Context, *CreateUserReqVo) (*JwtTokenRespVo, error)
	// 用户登录
	Login(context.Context, *VerificationReqVo) (*JwtTokenRespVo, error)
	// 删除用户
	DeleteUser(context.Context, *VerificationReqVo) (*JwtTokenRespVo, error)
	mustEmbedUnimplementedUserServerServer()
}

// UnimplementedUserServerServer must be embedded to have forward compatible implementations.
type UnimplementedUserServerServer struct {
}

func (UnimplementedUserServerServer) GetUser(context.Context, *UserIdReqVo) (*UserInfoRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServerServer) UpdateUser(context.Context, *UpdateUserReqVo) (*JwtTokenRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServerServer) CreateUser(context.Context, *CreateUserReqVo) (*JwtTokenRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServerServer) Login(context.Context, *VerificationReqVo) (*JwtTokenRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServerServer) DeleteUser(context.Context, *VerificationReqVo) (*JwtTokenRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServerServer) mustEmbedUnimplementedUserServerServer() {}

// UnsafeUserServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServerServer will
// result in compilation errors.
type UnsafeUserServerServer interface {
	mustEmbedUnimplementedUserServerServer()
}

func RegisterUserServerServer(s grpc.ServiceRegistrar, srv UserServerServer) {
	s.RegisterService(&UserServer_ServiceDesc, srv)
}

func _UserServer_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetUser(ctx, req.(*UserIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UpdateUser(ctx, req.(*UpdateUserReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).CreateUser(ctx, req.(*CreateUserReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).Login(ctx, req.(*VerificationReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).DeleteUser(ctx, req.(*VerificationReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServer_ServiceDesc is the grpc.ServiceDesc for UserServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_server.UserServer",
	HandlerType: (*UserServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserServer_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserServer_UpdateUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserServer_CreateUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserServer_Login_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserServer_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user_server.proto",
}

const (
	RoleServer_CreateRole_FullMethodName  = "/user_server.RoleServer/CreateRole"
	RoleServer_GetRole_FullMethodName     = "/user_server.RoleServer/GetRole"
	RoleServer_DeleteRole_FullMethodName  = "/user_server.RoleServer/DeleteRole"
	RoleServer_GetRoleList_FullMethodName = "/user_server.RoleServer/GetRoleList"
)

// RoleServerClient is the client API for RoleServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 角色服务
type RoleServerClient interface {
	// 创建新角色
	CreateRole(ctx context.Context, in *CreateRoleReqVo, opts ...grpc.CallOption) (*RoleInfoRespVo, error)
	// 获取角色信息
	GetRole(ctx context.Context, in *RoleIdReqVo, opts ...grpc.CallOption) (*RoleInfoRespVo, error)
	// 删除角色
	DeleteRole(ctx context.Context, in *RoleIdReqVo, opts ...grpc.CallOption) (*RoleInfoRespVo, error)
	// 获取角色列表
	GetRoleList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoleInfoListRespVo, error)
}

type roleServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServerClient(cc grpc.ClientConnInterface) RoleServerClient {
	return &roleServerClient{cc}
}

func (c *roleServerClient) CreateRole(ctx context.Context, in *CreateRoleReqVo, opts ...grpc.CallOption) (*RoleInfoRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleInfoRespVo)
	err := c.cc.Invoke(ctx, RoleServer_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) GetRole(ctx context.Context, in *RoleIdReqVo, opts ...grpc.CallOption) (*RoleInfoRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleInfoRespVo)
	err := c.cc.Invoke(ctx, RoleServer_GetRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) DeleteRole(ctx context.Context, in *RoleIdReqVo, opts ...grpc.CallOption) (*RoleInfoRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleInfoRespVo)
	err := c.cc.Invoke(ctx, RoleServer_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) GetRoleList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoleInfoListRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleInfoListRespVo)
	err := c.cc.Invoke(ctx, RoleServer_GetRoleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServerServer is the server API for RoleServer service.
// All implementations must embed UnimplementedRoleServerServer
// for forward compatibility
//
// 角色服务
type RoleServerServer interface {
	// 创建新角色
	CreateRole(context.Context, *CreateRoleReqVo) (*RoleInfoRespVo, error)
	// 获取角色信息
	GetRole(context.Context, *RoleIdReqVo) (*RoleInfoRespVo, error)
	// 删除角色
	DeleteRole(context.Context, *RoleIdReqVo) (*RoleInfoRespVo, error)
	// 获取角色列表
	GetRoleList(context.Context, *Empty) (*RoleInfoListRespVo, error)
	mustEmbedUnimplementedRoleServerServer()
}

// UnimplementedRoleServerServer must be embedded to have forward compatible implementations.
type UnimplementedRoleServerServer struct {
}

func (UnimplementedRoleServerServer) CreateRole(context.Context, *CreateRoleReqVo) (*RoleInfoRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRoleServerServer) GetRole(context.Context, *RoleIdReqVo) (*RoleInfoRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRoleServerServer) DeleteRole(context.Context, *RoleIdReqVo) (*RoleInfoRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleServerServer) GetRoleList(context.Context, *Empty) (*RoleInfoListRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleList not implemented")
}
func (UnimplementedRoleServerServer) mustEmbedUnimplementedRoleServerServer() {}

// UnsafeRoleServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServerServer will
// result in compilation errors.
type UnsafeRoleServerServer interface {
	mustEmbedUnimplementedRoleServerServer()
}

func RegisterRoleServerServer(s grpc.ServiceRegistrar, srv RoleServerServer) {
	s.RegisterService(&RoleServer_ServiceDesc, srv)
}

func _RoleServer_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServer_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).CreateRole(ctx, req.(*CreateRoleReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServer_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).GetRole(ctx, req.(*RoleIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServer_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).DeleteRole(ctx, req.(*RoleIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_GetRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).GetRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServer_GetRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).GetRoleList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleServer_ServiceDesc is the grpc.ServiceDesc for RoleServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_server.RoleServer",
	HandlerType: (*RoleServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _RoleServer_CreateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _RoleServer_GetRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleServer_DeleteRole_Handler,
		},
		{
			MethodName: "GetRoleList",
			Handler:    _RoleServer_GetRoleList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user_server.proto",
}

const (
	UserRoleServer_AssignRoleToUser_FullMethodName   = "/user_server.UserRoleServer/AssignRoleToUser"
	UserRoleServer_RemoveRoleFromUser_FullMethodName = "/user_server.UserRoleServer/RemoveRoleFromUser"
	UserRoleServer_GetRolesByUser_FullMethodName     = "/user_server.UserRoleServer/GetRolesByUser"
	UserRoleServer_GetUsersByRole_FullMethodName     = "/user_server.UserRoleServer/GetUsersByRole"
)

// UserRoleServerClient is the client API for UserRoleServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户角色服务
type UserRoleServerClient interface {
	// 分配角色给用户
	AssignRoleToUser(ctx context.Context, in *UserRoleReqVo, opts ...grpc.CallOption) (*UserRoleRespVo, error)
	// 移除用户的角色
	RemoveRoleFromUser(ctx context.Context, in *UserRoleReqVo, opts ...grpc.CallOption) (*UserRoleRespVo, error)
	// 获取用户角色
	GetRolesByUser(ctx context.Context, in *UserIdReqVo, opts ...grpc.CallOption) (*UserRolesRespVo, error)
	// 获取角色用户
	GetUsersByRole(ctx context.Context, in *RoleIdReqVo, opts ...grpc.CallOption) (*RoleUsersRespVo, error)
}

type userRoleServerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRoleServerClient(cc grpc.ClientConnInterface) UserRoleServerClient {
	return &userRoleServerClient{cc}
}

func (c *userRoleServerClient) AssignRoleToUser(ctx context.Context, in *UserRoleReqVo, opts ...grpc.CallOption) (*UserRoleRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRoleRespVo)
	err := c.cc.Invoke(ctx, UserRoleServer_AssignRoleToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServerClient) RemoveRoleFromUser(ctx context.Context, in *UserRoleReqVo, opts ...grpc.CallOption) (*UserRoleRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRoleRespVo)
	err := c.cc.Invoke(ctx, UserRoleServer_RemoveRoleFromUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServerClient) GetRolesByUser(ctx context.Context, in *UserIdReqVo, opts ...grpc.CallOption) (*UserRolesRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRolesRespVo)
	err := c.cc.Invoke(ctx, UserRoleServer_GetRolesByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServerClient) GetUsersByRole(ctx context.Context, in *RoleIdReqVo, opts ...grpc.CallOption) (*RoleUsersRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleUsersRespVo)
	err := c.cc.Invoke(ctx, UserRoleServer_GetUsersByRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRoleServerServer is the server API for UserRoleServer service.
// All implementations must embed UnimplementedUserRoleServerServer
// for forward compatibility
//
// 用户角色服务
type UserRoleServerServer interface {
	// 分配角色给用户
	AssignRoleToUser(context.Context, *UserRoleReqVo) (*UserRoleRespVo, error)
	// 移除用户的角色
	RemoveRoleFromUser(context.Context, *UserRoleReqVo) (*UserRoleRespVo, error)
	// 获取用户角色
	GetRolesByUser(context.Context, *UserIdReqVo) (*UserRolesRespVo, error)
	// 获取角色用户
	GetUsersByRole(context.Context, *RoleIdReqVo) (*RoleUsersRespVo, error)
	mustEmbedUnimplementedUserRoleServerServer()
}

// UnimplementedUserRoleServerServer must be embedded to have forward compatible implementations.
type UnimplementedUserRoleServerServer struct {
}

func (UnimplementedUserRoleServerServer) AssignRoleToUser(context.Context, *UserRoleReqVo) (*UserRoleRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRoleToUser not implemented")
}
func (UnimplementedUserRoleServerServer) RemoveRoleFromUser(context.Context, *UserRoleReqVo) (*UserRoleRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleFromUser not implemented")
}
func (UnimplementedUserRoleServerServer) GetRolesByUser(context.Context, *UserIdReqVo) (*UserRolesRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesByUser not implemented")
}
func (UnimplementedUserRoleServerServer) GetUsersByRole(context.Context, *RoleIdReqVo) (*RoleUsersRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByRole not implemented")
}
func (UnimplementedUserRoleServerServer) mustEmbedUnimplementedUserRoleServerServer() {}

// UnsafeUserRoleServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRoleServerServer will
// result in compilation errors.
type UnsafeUserRoleServerServer interface {
	mustEmbedUnimplementedUserRoleServerServer()
}

func RegisterUserRoleServerServer(s grpc.ServiceRegistrar, srv UserRoleServerServer) {
	s.RegisterService(&UserRoleServer_ServiceDesc, srv)
}

func _UserRoleServer_AssignRoleToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServerServer).AssignRoleToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleServer_AssignRoleToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServerServer).AssignRoleToUser(ctx, req.(*UserRoleReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleServer_RemoveRoleFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServerServer).RemoveRoleFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleServer_RemoveRoleFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServerServer).RemoveRoleFromUser(ctx, req.(*UserRoleReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleServer_GetRolesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServerServer).GetRolesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleServer_GetRolesByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServerServer).GetRolesByUser(ctx, req.(*UserIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleServer_GetUsersByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServerServer).GetUsersByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleServer_GetUsersByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServerServer).GetUsersByRole(ctx, req.(*RoleIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRoleServer_ServiceDesc is the grpc.ServiceDesc for UserRoleServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRoleServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_server.UserRoleServer",
	HandlerType: (*UserRoleServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignRoleToUser",
			Handler:    _UserRoleServer_AssignRoleToUser_Handler,
		},
		{
			MethodName: "RemoveRoleFromUser",
			Handler:    _UserRoleServer_RemoveRoleFromUser_Handler,
		},
		{
			MethodName: "GetRolesByUser",
			Handler:    _UserRoleServer_GetRolesByUser_Handler,
		},
		{
			MethodName: "GetUsersByRole",
			Handler:    _UserRoleServer_GetUsersByRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user_server.proto",
}

const (
	Permissions_CreatePermission_FullMethodName    = "/user_server.Permissions/CreatePermission"
	Permissions_GetPermission_FullMethodName       = "/user_server.Permissions/GetPermission"
	Permissions_GetPermissionByName_FullMethodName = "/user_server.Permissions/GetPermissionByName"
)

// PermissionsClient is the client API for Permissions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 权限服务
type PermissionsClient interface {
	// 创建新权限
	CreatePermission(ctx context.Context, in *CreatePermissionReqVo, opts ...grpc.CallOption) (*PermissionInfoRespVo, error)
	// 获取权限信息
	GetPermission(ctx context.Context, in *PermissionIdReqVo, opts ...grpc.CallOption) (*PermissionInfoRespVo, error)
	// 从名称获取权限
	GetPermissionByName(ctx context.Context, in *PermissionNameReqVo, opts ...grpc.CallOption) (*PermissionInfoRespVo, error)
}

type permissionsClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionsClient(cc grpc.ClientConnInterface) PermissionsClient {
	return &permissionsClient{cc}
}

func (c *permissionsClient) CreatePermission(ctx context.Context, in *CreatePermissionReqVo, opts ...grpc.CallOption) (*PermissionInfoRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionInfoRespVo)
	err := c.cc.Invoke(ctx, Permissions_CreatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) GetPermission(ctx context.Context, in *PermissionIdReqVo, opts ...grpc.CallOption) (*PermissionInfoRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionInfoRespVo)
	err := c.cc.Invoke(ctx, Permissions_GetPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) GetPermissionByName(ctx context.Context, in *PermissionNameReqVo, opts ...grpc.CallOption) (*PermissionInfoRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionInfoRespVo)
	err := c.cc.Invoke(ctx, Permissions_GetPermissionByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionsServer is the server API for Permissions service.
// All implementations must embed UnimplementedPermissionsServer
// for forward compatibility
//
// 权限服务
type PermissionsServer interface {
	// 创建新权限
	CreatePermission(context.Context, *CreatePermissionReqVo) (*PermissionInfoRespVo, error)
	// 获取权限信息
	GetPermission(context.Context, *PermissionIdReqVo) (*PermissionInfoRespVo, error)
	// 从名称获取权限
	GetPermissionByName(context.Context, *PermissionNameReqVo) (*PermissionInfoRespVo, error)
	mustEmbedUnimplementedPermissionsServer()
}

// UnimplementedPermissionsServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionsServer struct {
}

func (UnimplementedPermissionsServer) CreatePermission(context.Context, *CreatePermissionReqVo) (*PermissionInfoRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedPermissionsServer) GetPermission(context.Context, *PermissionIdReqVo) (*PermissionInfoRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedPermissionsServer) GetPermissionByName(context.Context, *PermissionNameReqVo) (*PermissionInfoRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionByName not implemented")
}
func (UnimplementedPermissionsServer) mustEmbedUnimplementedPermissionsServer() {}

// UnsafePermissionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionsServer will
// result in compilation errors.
type UnsafePermissionsServer interface {
	mustEmbedUnimplementedPermissionsServer()
}

func RegisterPermissionsServer(s grpc.ServiceRegistrar, srv PermissionsServer) {
	s.RegisterService(&Permissions_ServiceDesc, srv)
}

func _Permissions_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissions_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).CreatePermission(ctx, req.(*CreatePermissionReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissions_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissions_GetPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).GetPermission(ctx, req.(*PermissionIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissions_GetPermissionByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionNameReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).GetPermissionByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissions_GetPermissionByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).GetPermissionByName(ctx, req.(*PermissionNameReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

// Permissions_ServiceDesc is the grpc.ServiceDesc for Permissions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Permissions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_server.Permissions",
	HandlerType: (*PermissionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePermission",
			Handler:    _Permissions_CreatePermission_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _Permissions_GetPermission_Handler,
		},
		{
			MethodName: "GetPermissionByName",
			Handler:    _Permissions_GetPermissionByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user_server.proto",
}

const (
	RolePermissions_AssignPermissionToRole_FullMethodName   = "/user_server.RolePermissions/AssignPermissionToRole"
	RolePermissions_RemovePermissionFromRole_FullMethodName = "/user_server.RolePermissions/RemovePermissionFromRole"
	RolePermissions_GetPermissionsByRole_FullMethodName     = "/user_server.RolePermissions/GetPermissionsByRole"
	RolePermissions_GetRolesByPermission_FullMethodName     = "/user_server.RolePermissions/GetRolesByPermission"
	RolePermissions_RoleHasPermission_FullMethodName        = "/user_server.RolePermissions/RoleHasPermission"
)

// RolePermissionsClient is the client API for RolePermissions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 角色权限服务
type RolePermissionsClient interface {
	// 分配权限给角色
	AssignPermissionToRole(ctx context.Context, in *RolePermissionReqVo, opts ...grpc.CallOption) (*RolePermissionRespVo, error)
	// 移除角色的权限
	RemovePermissionFromRole(ctx context.Context, in *RolePermissionReqVo, opts ...grpc.CallOption) (*RolePermissionRespVo, error)
	// 获取角色的权限
	GetPermissionsByRole(ctx context.Context, in *RoleIdReqVo, opts ...grpc.CallOption) (*RolePermissionsRespVo, error)
	// 获取具有某权限的角色
	GetRolesByPermission(ctx context.Context, in *PermissionIdReqVo, opts ...grpc.CallOption) (*PermissionRolesRespVo, error)
	// 检查角色是否具有某权限
	RoleHasPermission(ctx context.Context, in *RoleIdPermissionIdReqVo, opts ...grpc.CallOption) (*BoolRespVo, error)
}

type rolePermissionsClient struct {
	cc grpc.ClientConnInterface
}

func NewRolePermissionsClient(cc grpc.ClientConnInterface) RolePermissionsClient {
	return &rolePermissionsClient{cc}
}

func (c *rolePermissionsClient) AssignPermissionToRole(ctx context.Context, in *RolePermissionReqVo, opts ...grpc.CallOption) (*RolePermissionRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RolePermissionRespVo)
	err := c.cc.Invoke(ctx, RolePermissions_AssignPermissionToRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolePermissionsClient) RemovePermissionFromRole(ctx context.Context, in *RolePermissionReqVo, opts ...grpc.CallOption) (*RolePermissionRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RolePermissionRespVo)
	err := c.cc.Invoke(ctx, RolePermissions_RemovePermissionFromRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolePermissionsClient) GetPermissionsByRole(ctx context.Context, in *RoleIdReqVo, opts ...grpc.CallOption) (*RolePermissionsRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RolePermissionsRespVo)
	err := c.cc.Invoke(ctx, RolePermissions_GetPermissionsByRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolePermissionsClient) GetRolesByPermission(ctx context.Context, in *PermissionIdReqVo, opts ...grpc.CallOption) (*PermissionRolesRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionRolesRespVo)
	err := c.cc.Invoke(ctx, RolePermissions_GetRolesByPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolePermissionsClient) RoleHasPermission(ctx context.Context, in *RoleIdPermissionIdReqVo, opts ...grpc.CallOption) (*BoolRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolRespVo)
	err := c.cc.Invoke(ctx, RolePermissions_RoleHasPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RolePermissionsServer is the server API for RolePermissions service.
// All implementations must embed UnimplementedRolePermissionsServer
// for forward compatibility
//
// 角色权限服务
type RolePermissionsServer interface {
	// 分配权限给角色
	AssignPermissionToRole(context.Context, *RolePermissionReqVo) (*RolePermissionRespVo, error)
	// 移除角色的权限
	RemovePermissionFromRole(context.Context, *RolePermissionReqVo) (*RolePermissionRespVo, error)
	// 获取角色的权限
	GetPermissionsByRole(context.Context, *RoleIdReqVo) (*RolePermissionsRespVo, error)
	// 获取具有某权限的角色
	GetRolesByPermission(context.Context, *PermissionIdReqVo) (*PermissionRolesRespVo, error)
	// 检查角色是否具有某权限
	RoleHasPermission(context.Context, *RoleIdPermissionIdReqVo) (*BoolRespVo, error)
	mustEmbedUnimplementedRolePermissionsServer()
}

// UnimplementedRolePermissionsServer must be embedded to have forward compatible implementations.
type UnimplementedRolePermissionsServer struct {
}

func (UnimplementedRolePermissionsServer) AssignPermissionToRole(context.Context, *RolePermissionReqVo) (*RolePermissionRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPermissionToRole not implemented")
}
func (UnimplementedRolePermissionsServer) RemovePermissionFromRole(context.Context, *RolePermissionReqVo) (*RolePermissionRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermissionFromRole not implemented")
}
func (UnimplementedRolePermissionsServer) GetPermissionsByRole(context.Context, *RoleIdReqVo) (*RolePermissionsRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionsByRole not implemented")
}
func (UnimplementedRolePermissionsServer) GetRolesByPermission(context.Context, *PermissionIdReqVo) (*PermissionRolesRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesByPermission not implemented")
}
func (UnimplementedRolePermissionsServer) RoleHasPermission(context.Context, *RoleIdPermissionIdReqVo) (*BoolRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleHasPermission not implemented")
}
func (UnimplementedRolePermissionsServer) mustEmbedUnimplementedRolePermissionsServer() {}

// UnsafeRolePermissionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolePermissionsServer will
// result in compilation errors.
type UnsafeRolePermissionsServer interface {
	mustEmbedUnimplementedRolePermissionsServer()
}

func RegisterRolePermissionsServer(s grpc.ServiceRegistrar, srv RolePermissionsServer) {
	s.RegisterService(&RolePermissions_ServiceDesc, srv)
}

func _RolePermissions_AssignPermissionToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolePermissionsServer).AssignPermissionToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolePermissions_AssignPermissionToRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolePermissionsServer).AssignPermissionToRole(ctx, req.(*RolePermissionReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolePermissions_RemovePermissionFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolePermissionsServer).RemovePermissionFromRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolePermissions_RemovePermissionFromRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolePermissionsServer).RemovePermissionFromRole(ctx, req.(*RolePermissionReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolePermissions_GetPermissionsByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolePermissionsServer).GetPermissionsByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolePermissions_GetPermissionsByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolePermissionsServer).GetPermissionsByRole(ctx, req.(*RoleIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolePermissions_GetRolesByPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolePermissionsServer).GetRolesByPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolePermissions_GetRolesByPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolePermissionsServer).GetRolesByPermission(ctx, req.(*PermissionIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolePermissions_RoleHasPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleIdPermissionIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolePermissionsServer).RoleHasPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolePermissions_RoleHasPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolePermissionsServer).RoleHasPermission(ctx, req.(*RoleIdPermissionIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

// RolePermissions_ServiceDesc is the grpc.ServiceDesc for RolePermissions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolePermissions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_server.RolePermissions",
	HandlerType: (*RolePermissionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignPermissionToRole",
			Handler:    _RolePermissions_AssignPermissionToRole_Handler,
		},
		{
			MethodName: "RemovePermissionFromRole",
			Handler:    _RolePermissions_RemovePermissionFromRole_Handler,
		},
		{
			MethodName: "GetPermissionsByRole",
			Handler:    _RolePermissions_GetPermissionsByRole_Handler,
		},
		{
			MethodName: "GetRolesByPermission",
			Handler:    _RolePermissions_GetRolesByPermission_Handler,
		},
		{
			MethodName: "RoleHasPermission",
			Handler:    _RolePermissions_RoleHasPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user_server.proto",
}

const (
	UserPermissions_UserHasPermission_FullMethodName = "/user_server.UserPermissions/UserHasPermission"
)

// UserPermissionsClient is the client API for UserPermissions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户权限服务
type UserPermissionsClient interface {
	// 检查用户是否具有某权限
	UserHasPermission(ctx context.Context, in *UserTokenPermissionIdReqVo, opts ...grpc.CallOption) (*BoolRespVo, error)
}

type userPermissionsClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPermissionsClient(cc grpc.ClientConnInterface) UserPermissionsClient {
	return &userPermissionsClient{cc}
}

func (c *userPermissionsClient) UserHasPermission(ctx context.Context, in *UserTokenPermissionIdReqVo, opts ...grpc.CallOption) (*BoolRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolRespVo)
	err := c.cc.Invoke(ctx, UserPermissions_UserHasPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPermissionsServer is the server API for UserPermissions service.
// All implementations must embed UnimplementedUserPermissionsServer
// for forward compatibility
//
// 用户权限服务
type UserPermissionsServer interface {
	// 检查用户是否具有某权限
	UserHasPermission(context.Context, *UserTokenPermissionIdReqVo) (*BoolRespVo, error)
	mustEmbedUnimplementedUserPermissionsServer()
}

// UnimplementedUserPermissionsServer must be embedded to have forward compatible implementations.
type UnimplementedUserPermissionsServer struct {
}

func (UnimplementedUserPermissionsServer) UserHasPermission(context.Context, *UserTokenPermissionIdReqVo) (*BoolRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserHasPermission not implemented")
}
func (UnimplementedUserPermissionsServer) mustEmbedUnimplementedUserPermissionsServer() {}

// UnsafeUserPermissionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPermissionsServer will
// result in compilation errors.
type UnsafeUserPermissionsServer interface {
	mustEmbedUnimplementedUserPermissionsServer()
}

func RegisterUserPermissionsServer(s grpc.ServiceRegistrar, srv UserPermissionsServer) {
	s.RegisterService(&UserPermissions_ServiceDesc, srv)
}

func _UserPermissions_UserHasPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTokenPermissionIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermissionsServer).UserHasPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPermissions_UserHasPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermissionsServer).UserHasPermission(ctx, req.(*UserTokenPermissionIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPermissions_ServiceDesc is the grpc.ServiceDesc for UserPermissions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPermissions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_server.UserPermissions",
	HandlerType: (*UserPermissionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserHasPermission",
			Handler:    _UserPermissions_UserHasPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user_server.proto",
}
