// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: api/user_server.proto

package user_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserServer_GetUser_FullMethodName    = "/user_server.UserServer/GetUser"
	UserServer_UpdateUser_FullMethodName = "/user_server.UserServer/UpdateUser"
	UserServer_CreateUser_FullMethodName = "/user_server.UserServer/CreateUser"
	UserServer_Login_FullMethodName      = "/user_server.UserServer/Login"
	UserServer_DeleteUser_FullMethodName = "/user_server.UserServer/DeleteUser"
)

// UserServerClient is the client API for UserServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
//	用户服务
type UserServerClient interface {
	GetUser(ctx context.Context, in *UserIdReqVo, opts ...grpc.CallOption) (*UserInfoRespVo, error)
	UpdateUser(ctx context.Context, in *UpdateUserReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error)
	CreateUser(ctx context.Context, in *CreateUserReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error)
	Login(ctx context.Context, in *VerificationReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error)
	DeleteUser(ctx context.Context, in *VerificationReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error)
}

type userServerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServerClient(cc grpc.ClientConnInterface) UserServerClient {
	return &userServerClient{cc}
}

func (c *userServerClient) GetUser(ctx context.Context, in *UserIdReqVo, opts ...grpc.CallOption) (*UserInfoRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoRespVo)
	err := c.cc.Invoke(ctx, UserServer_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UpdateUser(ctx context.Context, in *UpdateUserReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JwtTokenRespVo)
	err := c.cc.Invoke(ctx, UserServer_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) CreateUser(ctx context.Context, in *CreateUserReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JwtTokenRespVo)
	err := c.cc.Invoke(ctx, UserServer_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) Login(ctx context.Context, in *VerificationReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JwtTokenRespVo)
	err := c.cc.Invoke(ctx, UserServer_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) DeleteUser(ctx context.Context, in *VerificationReqVo, opts ...grpc.CallOption) (*JwtTokenRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JwtTokenRespVo)
	err := c.cc.Invoke(ctx, UserServer_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServerServer is the server API for UserServer service.
// All implementations must embed UnimplementedUserServerServer
// for forward compatibility
//
//	用户服务
type UserServerServer interface {
	GetUser(context.Context, *UserIdReqVo) (*UserInfoRespVo, error)
	UpdateUser(context.Context, *UpdateUserReqVo) (*JwtTokenRespVo, error)
	CreateUser(context.Context, *CreateUserReqVo) (*JwtTokenRespVo, error)
	Login(context.Context, *VerificationReqVo) (*JwtTokenRespVo, error)
	DeleteUser(context.Context, *VerificationReqVo) (*JwtTokenRespVo, error)
	mustEmbedUnimplementedUserServerServer()
}

// UnimplementedUserServerServer must be embedded to have forward compatible implementations.
type UnimplementedUserServerServer struct {
}

func (UnimplementedUserServerServer) GetUser(context.Context, *UserIdReqVo) (*UserInfoRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServerServer) UpdateUser(context.Context, *UpdateUserReqVo) (*JwtTokenRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServerServer) CreateUser(context.Context, *CreateUserReqVo) (*JwtTokenRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServerServer) Login(context.Context, *VerificationReqVo) (*JwtTokenRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServerServer) DeleteUser(context.Context, *VerificationReqVo) (*JwtTokenRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServerServer) mustEmbedUnimplementedUserServerServer() {}

// UnsafeUserServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServerServer will
// result in compilation errors.
type UnsafeUserServerServer interface {
	mustEmbedUnimplementedUserServerServer()
}

func RegisterUserServerServer(s grpc.ServiceRegistrar, srv UserServerServer) {
	s.RegisterService(&UserServer_ServiceDesc, srv)
}

func _UserServer_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetUser(ctx, req.(*UserIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UpdateUser(ctx, req.(*UpdateUserReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).CreateUser(ctx, req.(*CreateUserReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).Login(ctx, req.(*VerificationReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).DeleteUser(ctx, req.(*VerificationReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServer_ServiceDesc is the grpc.ServiceDesc for UserServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_server.UserServer",
	HandlerType: (*UserServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserServer_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserServer_UpdateUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserServer_CreateUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserServer_Login_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserServer_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user_server.proto",
}

const (
	RoleServer_CreateRole_FullMethodName  = "/user_server.RoleServer/CreateRole"
	RoleServer_GetRole_FullMethodName     = "/user_server.RoleServer/GetRole"
	RoleServer_DeleteRole_FullMethodName  = "/user_server.RoleServer/DeleteRole"
	RoleServer_GetRoleList_FullMethodName = "/user_server.RoleServer/GetRoleList"
)

// RoleServerClient is the client API for RoleServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
//	角色服务
type RoleServerClient interface {
	CreateRole(ctx context.Context, in *CreateRoleReqVo, opts ...grpc.CallOption) (*RoleInfoRespVo, error)
	GetRole(ctx context.Context, in *RoleIdReqVo, opts ...grpc.CallOption) (*RoleInfoRespVo, error)
	DeleteRole(ctx context.Context, in *RoleIdReqVo, opts ...grpc.CallOption) (*RoleInfoRespVo, error)
	GetRoleList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoleInfoListRespVo, error)
}

type roleServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServerClient(cc grpc.ClientConnInterface) RoleServerClient {
	return &roleServerClient{cc}
}

func (c *roleServerClient) CreateRole(ctx context.Context, in *CreateRoleReqVo, opts ...grpc.CallOption) (*RoleInfoRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleInfoRespVo)
	err := c.cc.Invoke(ctx, RoleServer_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) GetRole(ctx context.Context, in *RoleIdReqVo, opts ...grpc.CallOption) (*RoleInfoRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleInfoRespVo)
	err := c.cc.Invoke(ctx, RoleServer_GetRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) DeleteRole(ctx context.Context, in *RoleIdReqVo, opts ...grpc.CallOption) (*RoleInfoRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleInfoRespVo)
	err := c.cc.Invoke(ctx, RoleServer_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) GetRoleList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoleInfoListRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleInfoListRespVo)
	err := c.cc.Invoke(ctx, RoleServer_GetRoleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServerServer is the server API for RoleServer service.
// All implementations must embed UnimplementedRoleServerServer
// for forward compatibility
//
//	角色服务
type RoleServerServer interface {
	CreateRole(context.Context, *CreateRoleReqVo) (*RoleInfoRespVo, error)
	GetRole(context.Context, *RoleIdReqVo) (*RoleInfoRespVo, error)
	DeleteRole(context.Context, *RoleIdReqVo) (*RoleInfoRespVo, error)
	GetRoleList(context.Context, *Empty) (*RoleInfoListRespVo, error)
	mustEmbedUnimplementedRoleServerServer()
}

// UnimplementedRoleServerServer must be embedded to have forward compatible implementations.
type UnimplementedRoleServerServer struct {
}

func (UnimplementedRoleServerServer) CreateRole(context.Context, *CreateRoleReqVo) (*RoleInfoRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRoleServerServer) GetRole(context.Context, *RoleIdReqVo) (*RoleInfoRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRoleServerServer) DeleteRole(context.Context, *RoleIdReqVo) (*RoleInfoRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleServerServer) GetRoleList(context.Context, *Empty) (*RoleInfoListRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleList not implemented")
}
func (UnimplementedRoleServerServer) mustEmbedUnimplementedRoleServerServer() {}

// UnsafeRoleServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServerServer will
// result in compilation errors.
type UnsafeRoleServerServer interface {
	mustEmbedUnimplementedRoleServerServer()
}

func RegisterRoleServerServer(s grpc.ServiceRegistrar, srv RoleServerServer) {
	s.RegisterService(&RoleServer_ServiceDesc, srv)
}

func _RoleServer_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServer_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).CreateRole(ctx, req.(*CreateRoleReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServer_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).GetRole(ctx, req.(*RoleIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServer_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).DeleteRole(ctx, req.(*RoleIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_GetRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).GetRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServer_GetRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).GetRoleList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleServer_ServiceDesc is the grpc.ServiceDesc for RoleServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_server.RoleServer",
	HandlerType: (*RoleServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _RoleServer_CreateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _RoleServer_GetRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleServer_DeleteRole_Handler,
		},
		{
			MethodName: "GetRoleList",
			Handler:    _RoleServer_GetRoleList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user_server.proto",
}

const (
	UserRoleServer_AssignRoleToUser_FullMethodName   = "/user_server.UserRoleServer/AssignRoleToUser"
	UserRoleServer_RemoveRoleFromUser_FullMethodName = "/user_server.UserRoleServer/RemoveRoleFromUser"
	UserRoleServer_GetRolesByUser_FullMethodName     = "/user_server.UserRoleServer/GetRolesByUser"
	UserRoleServer_GetUsersByRole_FullMethodName     = "/user_server.UserRoleServer/GetUsersByRole"
)

// UserRoleServerClient is the client API for UserRoleServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户角色服务
type UserRoleServerClient interface {
	AssignRoleToUser(ctx context.Context, in *UserRoleReqVo, opts ...grpc.CallOption) (*UserRoleRespVo, error)
	RemoveRoleFromUser(ctx context.Context, in *UserRoleReqVo, opts ...grpc.CallOption) (*UserRoleRespVo, error)
	GetRolesByUser(ctx context.Context, in *UserIdReqVo, opts ...grpc.CallOption) (*UserRolesRespVo, error)
	GetUsersByRole(ctx context.Context, in *RoleIdReqVo, opts ...grpc.CallOption) (*RoleUsersRespVo, error)
}

type userRoleServerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRoleServerClient(cc grpc.ClientConnInterface) UserRoleServerClient {
	return &userRoleServerClient{cc}
}

func (c *userRoleServerClient) AssignRoleToUser(ctx context.Context, in *UserRoleReqVo, opts ...grpc.CallOption) (*UserRoleRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRoleRespVo)
	err := c.cc.Invoke(ctx, UserRoleServer_AssignRoleToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServerClient) RemoveRoleFromUser(ctx context.Context, in *UserRoleReqVo, opts ...grpc.CallOption) (*UserRoleRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRoleRespVo)
	err := c.cc.Invoke(ctx, UserRoleServer_RemoveRoleFromUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServerClient) GetRolesByUser(ctx context.Context, in *UserIdReqVo, opts ...grpc.CallOption) (*UserRolesRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRolesRespVo)
	err := c.cc.Invoke(ctx, UserRoleServer_GetRolesByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServerClient) GetUsersByRole(ctx context.Context, in *RoleIdReqVo, opts ...grpc.CallOption) (*RoleUsersRespVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleUsersRespVo)
	err := c.cc.Invoke(ctx, UserRoleServer_GetUsersByRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRoleServerServer is the server API for UserRoleServer service.
// All implementations must embed UnimplementedUserRoleServerServer
// for forward compatibility
//
// 用户角色服务
type UserRoleServerServer interface {
	AssignRoleToUser(context.Context, *UserRoleReqVo) (*UserRoleRespVo, error)
	RemoveRoleFromUser(context.Context, *UserRoleReqVo) (*UserRoleRespVo, error)
	GetRolesByUser(context.Context, *UserIdReqVo) (*UserRolesRespVo, error)
	GetUsersByRole(context.Context, *RoleIdReqVo) (*RoleUsersRespVo, error)
	mustEmbedUnimplementedUserRoleServerServer()
}

// UnimplementedUserRoleServerServer must be embedded to have forward compatible implementations.
type UnimplementedUserRoleServerServer struct {
}

func (UnimplementedUserRoleServerServer) AssignRoleToUser(context.Context, *UserRoleReqVo) (*UserRoleRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRoleToUser not implemented")
}
func (UnimplementedUserRoleServerServer) RemoveRoleFromUser(context.Context, *UserRoleReqVo) (*UserRoleRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleFromUser not implemented")
}
func (UnimplementedUserRoleServerServer) GetRolesByUser(context.Context, *UserIdReqVo) (*UserRolesRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesByUser not implemented")
}
func (UnimplementedUserRoleServerServer) GetUsersByRole(context.Context, *RoleIdReqVo) (*RoleUsersRespVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByRole not implemented")
}
func (UnimplementedUserRoleServerServer) mustEmbedUnimplementedUserRoleServerServer() {}

// UnsafeUserRoleServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRoleServerServer will
// result in compilation errors.
type UnsafeUserRoleServerServer interface {
	mustEmbedUnimplementedUserRoleServerServer()
}

func RegisterUserRoleServerServer(s grpc.ServiceRegistrar, srv UserRoleServerServer) {
	s.RegisterService(&UserRoleServer_ServiceDesc, srv)
}

func _UserRoleServer_AssignRoleToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServerServer).AssignRoleToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleServer_AssignRoleToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServerServer).AssignRoleToUser(ctx, req.(*UserRoleReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleServer_RemoveRoleFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServerServer).RemoveRoleFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleServer_RemoveRoleFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServerServer).RemoveRoleFromUser(ctx, req.(*UserRoleReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleServer_GetRolesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServerServer).GetRolesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleServer_GetRolesByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServerServer).GetRolesByUser(ctx, req.(*UserIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleServer_GetUsersByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleIdReqVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServerServer).GetUsersByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleServer_GetUsersByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServerServer).GetUsersByRole(ctx, req.(*RoleIdReqVo))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRoleServer_ServiceDesc is the grpc.ServiceDesc for UserRoleServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRoleServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_server.UserRoleServer",
	HandlerType: (*UserRoleServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignRoleToUser",
			Handler:    _UserRoleServer_AssignRoleToUser_Handler,
		},
		{
			MethodName: "RemoveRoleFromUser",
			Handler:    _UserRoleServer_RemoveRoleFromUser_Handler,
		},
		{
			MethodName: "GetRolesByUser",
			Handler:    _UserRoleServer_GetRolesByUser_Handler,
		},
		{
			MethodName: "GetUsersByRole",
			Handler:    _UserRoleServer_GetUsersByRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user_server.proto",
}
