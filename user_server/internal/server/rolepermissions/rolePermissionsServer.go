// Code generated by goctl. DO NOT EDIT.
// Source: user_server.proto

package server

import (
	"context"

	"user_server/internal/logic/rolepermissions"
	"user_server/internal/svc"
	"user_server/user_server"
)

type RolePermissionsServer struct {
	svcCtx *svc.ServiceContext
	user_server.UnimplementedRolePermissionsServer
}

func NewRolePermissionsServer(svcCtx *svc.ServiceContext) *RolePermissionsServer {
	return &RolePermissionsServer{
		svcCtx: svcCtx,
	}
}

// 分配权限给角色
func (s *RolePermissionsServer) AssignPermissionToRole(ctx context.Context, in *user_server.RolePermissionReqVo) (*user_server.RolePermissionRespVo, error) {
	l := rolepermissionslogic.NewAssignPermissionToRoleLogic(ctx, s.svcCtx)
	return l.AssignPermissionToRole(in)
}

// 移除角色的权限
func (s *RolePermissionsServer) RemovePermissionFromRole(ctx context.Context, in *user_server.RolePermissionReqVo) (*user_server.RolePermissionRespVo, error) {
	l := rolepermissionslogic.NewRemovePermissionFromRoleLogic(ctx, s.svcCtx)
	return l.RemovePermissionFromRole(in)
}

// 获取角色的权限
func (s *RolePermissionsServer) GetPermissionsByRole(ctx context.Context, in *user_server.RoleIdReqVo) (*user_server.RolePermissionsRespVo, error) {
	l := rolepermissionslogic.NewGetPermissionsByRoleLogic(ctx, s.svcCtx)
	return l.GetPermissionsByRole(in)
}

// 获取具有某权限的角色
func (s *RolePermissionsServer) GetRolesByPermission(ctx context.Context, in *user_server.PermissionIdReqVo) (*user_server.PermissionRolesRespVo, error) {
	l := rolepermissionslogic.NewGetRolesByPermissionLogic(ctx, s.svcCtx)
	return l.GetRolesByPermission(in)
}

// 检查角色是否具有某权限
func (s *RolePermissionsServer) RoleHasPermission(ctx context.Context, in *user_server.RoleIdPermissionIdReqVo) (*user_server.BoolRespVo, error) {
	l := rolepermissionslogic.NewRoleHasPermissionLogic(ctx, s.svcCtx)
	return l.RoleHasPermission(in)
}
