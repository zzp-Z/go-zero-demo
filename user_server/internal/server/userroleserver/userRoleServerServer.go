// Code generated by goctl. DO NOT EDIT.
// Source: user_server.proto

package server

import (
	"context"

	"user_server/internal/logic/userroleserver"
	"user_server/internal/svc"
	"user_server/user_server"
)

type UserRoleServerServer struct {
	svcCtx *svc.ServiceContext
	user_server.UnimplementedUserRoleServerServer
}

func NewUserRoleServerServer(svcCtx *svc.ServiceContext) *UserRoleServerServer {
	return &UserRoleServerServer{
		svcCtx: svcCtx,
	}
}

func (s *UserRoleServerServer) AssignRoleToUser(ctx context.Context, in *user_server.UserRoleReqVo) (*user_server.UserRoleRespVo, error) {
	l := userroleserverlogic.NewAssignRoleToUserLogic(ctx, s.svcCtx)
	return l.AssignRoleToUser(in)
}

func (s *UserRoleServerServer) RemoveRoleFromUser(ctx context.Context, in *user_server.UserRoleReqVo) (*user_server.UserRoleRespVo, error) {
	l := userroleserverlogic.NewRemoveRoleFromUserLogic(ctx, s.svcCtx)
	return l.RemoveRoleFromUser(in)
}

func (s *UserRoleServerServer) GetRolesByUser(ctx context.Context, in *user_server.UserIdReqVo) (*user_server.UserRolesRespVo, error) {
	l := userroleserverlogic.NewGetRolesByUserLogic(ctx, s.svcCtx)
	return l.GetRolesByUser(in)
}

func (s *UserRoleServerServer) GetUsersByRole(ctx context.Context, in *user_server.RoleIdReqVo) (*user_server.RoleUsersRespVo, error) {
	l := userroleserverlogic.NewGetUsersByRoleLogic(ctx, s.svcCtx)
	return l.GetUsersByRole(in)
}
