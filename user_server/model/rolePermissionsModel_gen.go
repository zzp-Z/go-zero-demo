// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rolePermissionsFieldNames          = builder.RawFieldNames(&RolePermissions{})
	rolePermissionsRows                = strings.Join(rolePermissionsFieldNames, ",")
	rolePermissionsRowsExpectAutoSet   = strings.Join(stringx.Remove(rolePermissionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	rolePermissionsRowsWithPlaceHolder = strings.Join(stringx.Remove(rolePermissionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserServerRolePermissionsIdPrefix                  = "cache:userServer:rolePermissions:id:"
	cacheUserServerRolePermissionsPermissionsIdRoleIdPrefix = "cache:userServer:rolePermissions:permissionsId:roleId:"
)

type (
	rolePermissionsModel interface {
		Insert(ctx context.Context, data *RolePermissions) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*RolePermissions, error)
		FindOneByPermissionsIdRoleId(ctx context.Context, permissionsId sql.NullInt64, roleId sql.NullInt64) (*RolePermissions, error)
		Update(ctx context.Context, data *RolePermissions) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultRolePermissionsModel struct {
		sqlc.CachedConn
		table string
	}

	RolePermissions struct {
		Id            uint64        `db:"id"`
		CreatedAt     sql.NullTime  `db:"created_at"`
		UpdatedAt     sql.NullTime  `db:"updated_at"`
		DeletedAt     sql.NullTime  `db:"deleted_at"`
		PermissionsId sql.NullInt64 `db:"permissions_id"`
		RoleId        sql.NullInt64 `db:"role_id"`
	}
)

func newRolePermissionsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRolePermissionsModel {
	return &defaultRolePermissionsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`role_permissions`",
	}
}

func (m *defaultRolePermissionsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userServerRolePermissionsIdKey := fmt.Sprintf("%s%v", cacheUserServerRolePermissionsIdPrefix, id)
	userServerRolePermissionsPermissionsIdRoleIdKey := fmt.Sprintf("%s%v:%v", cacheUserServerRolePermissionsPermissionsIdRoleIdPrefix, data.PermissionsId, data.RoleId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userServerRolePermissionsIdKey, userServerRolePermissionsPermissionsIdRoleIdKey)
	return err
}

func (m *defaultRolePermissionsModel) FindOne(ctx context.Context, id uint64) (*RolePermissions, error) {
	userServerRolePermissionsIdKey := fmt.Sprintf("%s%v", cacheUserServerRolePermissionsIdPrefix, id)
	var resp RolePermissions
	err := m.QueryRowCtx(ctx, &resp, userServerRolePermissionsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rolePermissionsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRolePermissionsModel) FindOneByPermissionsIdRoleId(ctx context.Context, permissionsId sql.NullInt64, roleId sql.NullInt64) (*RolePermissions, error) {
	userServerRolePermissionsPermissionsIdRoleIdKey := fmt.Sprintf("%s%v:%v", cacheUserServerRolePermissionsPermissionsIdRoleIdPrefix, permissionsId, roleId)
	var resp RolePermissions
	err := m.QueryRowIndexCtx(ctx, &resp, userServerRolePermissionsPermissionsIdRoleIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `permissions_id` = ? and `role_id` = ? limit 1", rolePermissionsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, permissionsId, roleId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRolePermissionsModel) Insert(ctx context.Context, data *RolePermissions) (sql.Result, error) {
	userServerRolePermissionsIdKey := fmt.Sprintf("%s%v", cacheUserServerRolePermissionsIdPrefix, data.Id)
	userServerRolePermissionsPermissionsIdRoleIdKey := fmt.Sprintf("%s%v:%v", cacheUserServerRolePermissionsPermissionsIdRoleIdPrefix, data.PermissionsId, data.RoleId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, rolePermissionsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeletedAt, data.PermissionsId, data.RoleId)
	}, userServerRolePermissionsIdKey, userServerRolePermissionsPermissionsIdRoleIdKey)
	return ret, err
}

func (m *defaultRolePermissionsModel) Update(ctx context.Context, newData *RolePermissions) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	userServerRolePermissionsIdKey := fmt.Sprintf("%s%v", cacheUserServerRolePermissionsIdPrefix, data.Id)
	userServerRolePermissionsPermissionsIdRoleIdKey := fmt.Sprintf("%s%v:%v", cacheUserServerRolePermissionsPermissionsIdRoleIdPrefix, data.PermissionsId, data.RoleId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, rolePermissionsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DeletedAt, newData.PermissionsId, newData.RoleId, newData.Id)
	}, userServerRolePermissionsIdKey, userServerRolePermissionsPermissionsIdRoleIdKey)
	return err
}

func (m *defaultRolePermissionsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserServerRolePermissionsIdPrefix, primary)
}

func (m *defaultRolePermissionsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rolePermissionsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRolePermissionsModel) tableName() string {
	return m.table
}
